#! /bin/bash
################################################################################
#
#  vmmaestro - Tiny KVM wrapper
#
#  Copyright (C) 2014-2018 Koichi MATSUMOTO.  All rights reserved.
#
################################################################################

#E=echo

########################################
# use_sudo : y use sudo command 
#            d use doas command
#            else not use any commnad
########################################
use_sudo='y'

########################################
#### System
########################################

SYSDIR='/etc/vmmaestro'
DEF_NIC='virtio'
DEF_DISKIF='virtio'

boot_qemu_delay=10

########################################
#### Preset Default values
########################################
function set_default_values
{
  user_runas='kvm'
  cpu_model='host'
  cpu_units=1
  cpu_iswinguest=0
  memory_vmem=1024
  display_type='vnc'
  graphics_type='std'
  vnc_addr='127.0.0.1'
  spice_addr='127.0.0.1'
  vnc_number='0'
  spice_tls='n'
  spice_sasl='n'
  clock_utctime='y'
  clock_sync_host='y'
  cdrom_if='ide'
  disk_num=0
}

########################################
#### check args
########################################

if [[ $# < 2 ]]; then
  cmds='[start|consolestart|stop|shutdown|restart|kill|console|monitor|status]'
  echo 'Usage: '$0' '$cmds' vm-name,...'
  exit 1
fi

########################################
#### create startup command line
########################################
##############################
#### is enabled IOMMU
##############################
function io_mmu
{
  vendor=`grep vendor_id /proc/cpuinfo | uniq | awk '{ print $3; }'`
  iommu_args=''
  sudo dmesg | grep -e 'IOMMU enabled' > /dev/null
  if [[ $? == 0 ]]; then
    if [[ $vendor == 'GenuineIntel' ]]; then
      iommu_args='-device intel-iommu'
    else
      iommu_args='-device amd-iommu'
    fi
  else
    iommu_args=''
  fi
}

##############################
#### check CPU
##############################
function check_cpu
{
  target_cpu=$1
  TMPFILE=/tmp/.vmmaestro.tmp
  $system_qemu -cpu ? > $TMPFILE 2>&1
  CPUs=$(awk "/^x86/{ print $2; }" $TMPFILE)
  for c in $CPUs
  do
    if [[ $target_cpu = $c ]]; then
      return 1
    fi
  done

  return 0
}

##############################
#### create CPU
##############################
function create_cpu
{
  check_cpu $cpu_model
  if [[ ! $? ]]; then
    echo "Illegal cpu model = "$cpu_model
    exit 1
  fi

  cpu_args='-cpu '$cpu_model' -smp '$cpu_units
  
  if [[ x$cpu_cores != x ]]; then
    cpu_args=$cpu_args',cores='$cpu_cores
  fi
  if [[ x$cpu_threads != x ]]; then
    cpu_args=$cpu_args',threads='$cpu_threads
  fi
  if [[ x$cpu_sockets != x ]]; then
    cpu_args=$cpu_args',sockets='$cpu_sockets
  fi
  if [[ $cpu_iswinguest != 0 ]]; then
    cpu_args=$cpu_args',hv_relaxed,hv_spinlocks=0x1fff,hv_vapic,hv_time'
  fi
}

##############################
#### check NUMA
##############################
function check_numa
{
  if [[ $numa_is_numa == 'y' ]]; then
    numa_args='-numa '$numa_numa_opts
    if [[ $memory_huge == 'y' && $memory_share == 'y' ]]; then
      numa_args=$numa_args',memdev=mem'
    fi
  else
    numa_args=''
  fi 
}

##############################
#### create rng
##############################
function create_rng
{
  rng_args=''
  if [[ $rng_enable == 'y' ]]; then
    rng_args='-object rng-random,filename=/dev/hwrng,id=rng0 '
    rng_args=$rng_args'-device virtio-rng-pci,rng=rng0'
  fi
}

##############################
#### create Memory
##############################
function create_mem
{
  mem_args='-m '$memory_vmem
  if [[ $memory_auto == 'y' ]]; then
    mem_args=$mem_args' -device virtio-balloon,automatic=true'
  else
    mem_args=$mem_args' -device virtio-balloon'
  fi
  if [[ $memory_huge == 'y' ]]; then
    if [[ $memory_share == 'y' ]]; then
      if  [[ ! $memory_sharemem ]]; then
        memory_sharemem=$memory_vmem
      fi
      mem_args=$mem_args' -object memory-backend-file,id=mem,size='${memory_sharemem}'M,mem-path=/dev/hugepages,share=on'
    else
      mem_args=$mem_args' -mem-path /dev/hugepages'
    fi
    if [[ $memory_prealloc == 'y' ]]; then
      mem_args=$memargs' -mem-prealloc'
    fi
  fi
}

##############################
#### creete bios args
##############################
function create_bios
{
  bios_args=''
  if [[ x$bios_file != x ]]; then
      bios_args='-smbios file='$bios_file
  fi
  case  "$bios_type" in
    '0')
      bios_args=$bios_args' -smbios type=0'
      if [[ x$bios_vendor != x ]]; then
        bios_args=$bios_args',vender='$bios_vendor
      fi
      if [[ x$bios_version != x ]]; then
        bios_args=$bios_args',version='$bios_version
      fi
      if [[ x$bios_date != x ]]; then
        bios_args=$bios_args',date='$bios_date
      fi
      if [[ x$bios_release != x ]]; then
        bios_args=$bios_args',release'$bios_release
      fi
      ;;
    '1')
      bios_args=$bios_args' -smbios type=1'
      if [[ x$bios_manufacturer != x ]]; then
        bios_args=$bios_args',manufacturer='$bios_manufacturer
      fi
      if [[ x$bios_product != x ]]; then
        bios_args=$bios_args',product='$bios_product
      fi
      if [[ x$bios_version != x ]]; then
        bios_args=$bios_args',version='$bios_version
      fi
      if [[ x$bios_serial != x ]]; then
        bios_args=$bios_args',serial='$bios_serial
      fi
      if [[ x$bios_uuid != x ]]; then
        bios_args=$bios_args',uuid='$bios_uuid
      fi
      if [[ x$bios_sku != x ]]; then
        bios_args=$bios_args',sku='$bios_sku
      fi
      if [[ x$bios_family != x ]]; then
        bios_args=$bios_args',family='$bios_family
      fi
      ;;
    '2')
      bios_args=$bios_args' -smbios type=2'
      if [[ x$bios_manufacturer != x ]]; then
        bios_args=$bios_args',manufacturer='$bios_manufacturer
      fi
      if [[ x$bios_product != x ]]; then
        bios_args=$bios_args',product='$bios_product
      fi
      if [[ x$bios_version != x ]]; then
        bios_args=$bios_args',version='$bios_version
      fi
      if [[ x$bios_serial != x ]]; then
        bios_args=$bios_args',serial='$bios_serial
      fi
      if [[ x$bios_asset != x ]]; then
        bios_args=$bios_args',asset='$bios_asset
      fi
      if [[ x$bios_location != x ]]; then
        bios_args=$bios_args',location='$bios_location
      fi
      if [[ x$bios_family != x ]]; then
        bios_args=$bios_args',family='$bios_family
      fi
      ;;
    '3')
      bios_args=$bios_args' -smbios type=3'
      if [[ x$bios_manufacturer != x ]]; then
        bios_args=$bios_args',manufacturer='$bios_manufacturer
      fi
      if [[ x$bios_version != x ]]; then
        bios_args=$bios_args',version='$bios_version
      fi
      if [[ x$bios_serial != x ]]; then
        bios_args=$bios_args',serial='$bios_serial
      fi
      if [[ x$bios_asset != x ]]; then
        bios_args=$bios_args',asset='$bios_asset
      fi
      if [[ x$bios_sku != x ]]; then
        bios_args=$bios_args',sku='$bios_sku
      fi
      ;;
    '4')
      bios_args=$bios_args' -smbios type=4'
      if [[ x$bios_sock != x ]]; then
        bios_args=$bios_args',sock_pfx='$bios_sock
      fi
      if [[ x$bios_manufacturer != x ]]; then
        bios_args=$bios_args',manufacturer='$bios_manufacturer
      fi
      if [[ x$bios_version != x ]]; then
        bios_args=$bios_args',version='$bios_version
      fi
      if [[ x$bios_serial != x ]]; then
        bios_args=$bios_args',serial='$bios_serial
      fi
      if [[ x$bios_asset != x ]]; then
        bios_args=$bios_args',asset='$bios_asset
      fi
      if [[ x$bios_part != x ]]; then
        bios_args=$bios_args',part='$bios_part
      fi
      ;;
    '17')
      bios_args=$bios_args' -smbios type=17'
      if [[ x$bios_loc_pfx != x ]]; then
        bios_args=$bios_args',loc_pfx='$bios_loc_pfx
      fi
      if [[ x$bios_bank != x ]]; then
        bios_args=$bios_args',bank='$bios_bank
      fi
      if [[ x$bios_manufacturer != x ]]; then
        bios_args=$bios_args',manufacturer='$bios_manufacturer
      fi
      if [[ x$bios_serial != x ]]; then
        bios_args=$bios_args',serial='$bios_serial
      fi
      if [[ x$bios_asset != x ]]; then
        bios_args=$bios_args',asset='$bios_asset
      fi
      if [[ x$bios_part != x ]]; then
        bios_args=$bios_args',part='$bios_part
      fi
      if [[ x$bios_speed != x ]]; then
        bios_args=$bios_args',speed='$bios_speed
      fi
      ;;
    'uefi')
      if [[ x$bios_file != x ]]; then
        if [[ x$bios_nvram != x ]]; then
          bios_args='-drive if=pflash,unit=0,format=raw,readonly,file='$bios_file
          bios_args=$bios_args' -drive if=pflash,unit=1,format=raw,file='$bios_nvram
        else
          bios_args='-drive if=pflash,format=raw,file='$bios_file
        fi
      else
        echo "Missing UEFI file."
        exit 9
      fi
      ;;
    '*')
      ;;
  esac
}

##############################
#### creete drive args
##############################
function create_disk_drive
{
  disk_args=""
  idx=0
  while [[ x${disk_lv[$idx]} != x ]];
  do
    if [[ x$vg_name != x ]]; then
        disk_drive=/dev/$vg_name/${disk_lv[$idx]}
        if [[ ! -b $disk_drive ]]; then
            echo "Specified block device does not exist: "$disk_drive
            exit 10
        fi
    else
        disk_drive=${disk_lv[$idx]}
        if [[ ! -f $disk_drive ]]; then
            echo "Specified disk file does not exist: "$disk_drive
            exit 10
        fi
    fi
    if [[ x${disk_if[$idx]} == x ]]; then
      disk_if[$idx]=$DEF_DISKIF
    fi
    case "${disk_if[$idx]}" in
      "ide")      ;;
      "scsi")     ;;
      "virtio")   ;;
      "virtio-scsi") ;;
      *)
        echo "Unknown disk interface: "${disk_if[$idx]}
        exit 10
        ;;
    esac
    if [[ ${disk_if[$idx]} == 'virtio' || ${disk_if[$idx]} == 'virtio-scsi' ]]; then
      drive_id='drive'$idx
      disk_args=$disk_args' -drive if=none,id='$drive_id
      disk_args=$disk_args',aio=native,cache.direct=on,format=raw,file='$disk_drive
      disk_args=$disk_args',index='$idx',media=disk'
      if [[ ${disk_if[$idx]} == 'virtio-scsi' ]]; then
        disk_args=$disk_args' -device virtio-scsi,drive='$drive_id
        disk_args=$disk_args',scsi=on,config-wce=off'
      else
        disk_args=$disk_args' -device virtio-blk,drive='$drive_id
        disk_args=$disk_args',scsi=off,config-wce=off'
      fi
    else
      if [[ x${disk_aio[$idx]} == x ]]; then
        disk_aio[$idx]='native'
      fi
      case "${disk_aio[$idx]}" in
        "native")   ;;
        "threads")  ;;
        *)
          echo "Unknown AIO type: "${disk_aio[$idx]}
          exit 10
          ;;
      esac
      disk_args=$disk_args' -drive if='${disk_if[$idx]}',aio='${disk_aio[$idx]}',cache.direct=on'
      if [[ x${disk_fmt[$idx]} != x ]]; then
        disk_args=$disk_args',format='${disk_fmt[$idx]}
      fi
      disk_args=$disk_args',file='$disk_drive
      disk_args=$disk_args',index='$idx',media=disk'
    fi
    ((idx=idx+1))
  done
  disk_num=$idx
}

##############################
#### creete floppy disk
##############################
function create_floppy
{
  fd_args=""
  if [[ x$floppy_drive1 != x ]]; then
    fd_file=$floppy_drive1
    if [[ ! -f $floppy_drive1 ]]; then
        echo "Specified floppy file does not exist: "$floppy_drive1
        exit 12
    fi
    fd_args=$fd_args' -drive file='$floppy_drive1',if=floppy,index=0'
  fi
  if [[ x$floppy_drive2 != x ]]; then
    fd_file=$floppy_drive2
    if [[ ! -f $floppy_drive2 ]]; then
        echo "Specified floppy file does not exist: "$floppy_drive2
        exit 12
    fi
    fd_args=$fd_args' -drive file='$floppy_drive2',if=floppy,index=1'
  fi
}

##############################
#### CD-ROM
##############################
function create_cdrom {
  cd_args=""
  case "$cdrom_if" in
    "ide")    ;;
    "scsi")   ;;
     *)
       echo "Unknown CD Interface: "$cdrom_if
  esac
  cd_args=$cd_args' -drive if='$cdrom_if',aio=native'
  if [[ x$cdrom_iso != x ]]; then
    if [[ ! -f $cdrom_iso ]]; then
        echo "Specified iso file does not exist."
        exit 11
    fi
    cd_args=$cd_args',cache.direct=on,file='$cdrom_iso
  fi
  cd_args=$cd_args',index='$disk_num',media=cdrom'
}

##############################
### Boot order
##############################
function create_bootorder
{
  boot_args=""
  if [[ x$boot_order != x ]]; then
    boot_args='-boot '$boot_order
    if [[ x$bios_menu == 'y' ]]; then
      boot_args=$boot_args",menu=on"
    fi
  else
    if [[ x$bios_menu == 'y' ]]; then
      boot_args="-boot menu=on"
    fi
  fi
}

##############################
#### Nic model
##############################
function check_nic
{
  model=$1
  nic_models="virtio i82551 i82557b i82559er ne2k_pci ne2k_isa pcnet"
  nic_models=$nic_models" rtl8139 e1000 smc91c111 lance mcf_fec"
  for m in $nic_models
  do
    if [[ $m == $model ]]; then
      return 1
    fi
  done

  return 0
}

##############################
#### Mac address
##############################
function create_macaddr
{
  macaddr=''
  if [[ ${network_addr[$idx]} == 'random' ]]; then
    macaddr=`printf "00:16:3E:%02X:%02X:%02X" $(( $RANDOM & 0xff)) $(( $RANDOM & 0xff )) $(( $RANDOM & 0xff))`
  else
    macaddr=${network_addr[$idx]}
  fi
}

##############################
#### Network
##############################
function create_network_adaptor
{
  net_args=""
  idx=0
  while [[ x${network_type[$idx]} != x ]];
  do

    nic_arg=""
    
    if [[ x${network_name[$idx]} == x ]]; then
      echo "Need NIC symbol name: "$idx
      exit 13
    fi
    if [[ x${network_model[$idx]} == x ]]; then
      network_model[$idx]=$DEF_NIC
    fi
    check_nic ${network_model[$idx]}
    if [[ ! $? ]]; then
      echo "Illegal nic model: "$${network_model[$idx]} 
      exit 13
    fi

    case "${network_type[$idx]}" in
      "bridge")
        nic_arg='-netdev '${network_type[$idx]}',id='${network_name[$idx]}
        nic_arg=$nic_arg',br='${network_bridge[$idx]}
        nic_arg=$nic_arg' -net nic'
        if [[ ${network_vlan[$idx]} ]]; then
          nic_arg=$nic_arg',vlan='$network_vlan
        fi
        if [[ ${network_addr[$idx]} ]]; then
          create_macaddr
          nic_arg=$nic_arg',macaddr='${macaddr}
        fi
        nic_arg=$nic_arg',model='${network_model[$idx]}
        nic_arg=$nic_arg',netdev='${network_name[$idx]}
        ;;
      "tap")
        nic_arg='-netdev '${network_type[$idx]}',id='${network_name[$idx]}
        if [[ x${network_vhost[$idx]} != x && ${network_vhost[$idx]} == 'y' ]]; then
          nic_arg=$nic_arg',vhost=on'
          network_model[$idx]=$DEF_NIC
        fi
        if [[ x${network_if[$idx]} == x ]]; then
          echo "Need NIC interface name: "$idx
          exit 13
        fi
        nic_arg=$nic_arg',ifname='${network_if[$idx]}
        if [[ x${network_ifup[$idx]} == x ]]; then
          nic_arg=$nic_arg',script=no'
        else
          nic_arg=$nic_arg',script='${network_ifup[$idx]}
        fi
        if [[ x${network_ifdown[$idx]} != x ]]; then
          nic_arg=$nic_arg',downscript='${network_ifdown[$idx]}
        fi
        nic_arg=$nic_arg' -net nic'
        if [[ ${network_vlan[$idx]} ]]; then
          nic_arg=$nic_arg',vlan='$network_vlan
        fi
        if [[ ${network_addr[$idx]} ]]; then
          create_macaddr
          nic_arg=$nic_arg',macaddr='${macaddr}
        fi
        nic_arg=$nic_arg',model='${network_model[$idx]}
        nic_arg=$nic_arg',netdev='${network_name[$idx]}
        ;;
      "user")
        if [[ x${network_charid[$idx]} == x ]]; then
          ${network_charid[$idx]}='char'$idx
        fi
        if [[ x${network_path[$idx]} == x ]]; then
          echo "Need Path: "$idx
          exit 13
        fi
        nic_arg='-chardev socket,id='${network_charid[$idx]}'path='${network_path[$idx]}
        nic_arg=$nic_arg' '
        nic_arg=$nic_arg'-netdev type=vhost-user,id='${network_name[$idx]}'chardev='${network_charid[$idx]}',vhostforce'
        nic_arg=$nic_arg' '
        if [[ ${network_addr[$idx]} ]]; then
          create_macaddr
          nic_arg=$nic_arg'-device virtio-net-pci,mac='${macaddr}',netdev='${network_name[$idx]}',mrg_rxbuf=off'
        else
          nic_arg=$nic_arg'-device virtio-net-pci,netdev='${network_name[$idx]}',mrg_rxbuf=off'
        fi
        ;;
      "none")
        nic_arg='-net none'
        ;;
      *)
        echo "Unknown NIC type: "${network_type[$idx]}
        exit 13
        ;;
    esac
    net_args=$net_args' '$nic_arg

    ((idx=idx+1))
    
  done
}

##############################
#### Display
##############################
function create_display
{
  case "$display_type" in
    vnc)
      disp_args='-vga '$graphics_type' -vnc '$vnc_addr:$vnc_number
      ;;
    spice)
      disp_args='-vga qxl -spice addr='$spice_addr',port='$spice_port
      if [[ $spice_sasl == 'y' ]];then
        disp_args=$disp_args',sasl'
      else
        disp_args=$disp_args',disable-ticketing'
      fi
      if [[ $spice_tls == 'y' ]]; then
        if [[ x$spice_tls_port == x || x$ssl_SSLDIR == x ]]; then
          echo 'Need both TLS port and SSL cert dir specified.'
          exit 14
        fi
        disp_args=$disp_args',tls-port='$spice_tls_port',x509-dir='$ssl_SSLDIR
      fi
      ;;
    virtio)
      disp_args='-vga '$graphics_type' -display sdl,gl=on'
      ;;
    sdl)
      disp_args='-vga '$graphics_type' -sdl'
      ;;
    curses)
      disp_args='-curses'
      ;;
    none)
      disp_args='-display none'
      ;;
    off)
      disp_args='-nographic'
      ;;
    *)
      echo 'Illegal display: '$display_type
      exit 14
      ;;
  esac  
}

##############################
#### Keyboard
##############################
function create_kbd
{
  KBD_LIST="ar de-ch es fo fr-ca hu ja mk no pt-br sv da en-gb et fr fr-ch is lt nl pl ru th"
  KBD_LIST=$KBD_LIST"de en-us fi fr-be hr it lv nl-be pt sl tr"

  kbd_args=
  if [[ x$keyboard_lang != x ]]; then 
    for l in $KBD_LIST
    do
      if [[ $keyboard_lang = $l ]]; then
        kbd_args='-k '$keyboard_lang
        break
      fi
    done
  fi
}

##############################
#### Keyboard
##############################
function create_rtc
{
  rtc_args='-rtc'
  if [[ $clock_utctime == 'n' ]]; then
    rtc_args=$rtc_args' base=localtime'
  else
    rtc_args=$rtc_args' base=utc'
  fi
  if [[ $clock_sync_host == 'n' ]]; then
    rtc_args=$rtc_args',clock=vm'
  else
    rtc_args=$rtc_args',clock=host'
  fi
}

##############################
#### Create Run Directory
##############################
function create_rundir
{
    vmrundir=$system_rundir/$vm
    if [[ ! -d $vmrundir ]]; then
        $SUDO mkdir -p $vmrundir
        if [[ x$user_runas != x ]]; then
          $SUDO chown $user_runas:$user_runas $vmrundir
        fi
    fi
    chroot_dir=''
    if [[ x$user_chroot == 'y' ]]; then
      chroot_dir='-chroot '$vmrundir
    elif [[ -d $user_chroot ]]; then
      chroot_dir='-chroot '$user_chroot
    fi
}

##############################
#### Serial Port Socket
##############################
function get_serial
{
  serial_port=$system_rundir/$vm/serial.sock
}

##############################
#### Monitor Port Socket
##############################
function get_monitor
{
  monitor_port=$system_rundir/$vm/monitor.sock
}

##############################
#### PID file
##############################
function get_pid_file
{
  pid_file=$system_rundir/$vm/$vm.pid
}

##############################
#### Serial & Monitor
##############################
function create_console
{
  get_serial
  s_args='-serial unix:'$serial_port',server,nowait'
  get_monitor
  m_args='-monitor unix:'$monitor_port',server,nowait'
  console_args=$s_args' '$m_args
}

#############################
#### Build Command Line
#############################
function build_cmdline
{
  # io_mmu
  create_cpu
  check_numa
  create_rng
  create_mem
  create_bios
  create_disk_drive
  create_floppy
  create_cdrom
  create_bootorder
  create_network_adaptor
  create_display
  create_kbd
  create_console
  create_rtc
  get_pid_file

  if [[ $system_qemu == 'kvm' ]]; then
    CMDLINE=$system_qemu
  else
    CMDLINE=$system_qemu' -enable-kvm'
  fi
  CMDLINE=$CMDLINE' -daemonize -runas '$user_runas' '$chroot_dir
  CMDLINE=$CMDLINE' -name '$vm
  CMDLINE=$CMDLINE' '$iommu_args' '$cpu_args' '$rng_args' '$mem_args
  CMDLINE=$CMDLINE' '$numa_args' '$boot_args' '$bios_args' '$disk_args
  CMDLINE=$CMDLINE' '$cd_args' '$fd_args' '$net_args' '$kbd_args
  CMDLINE=$CMDLINE' '$disp_args' '$console_args' '$rtc_args
  CMDLINE=$CMDLINE' -pidfile '$pid_file

  if [[ x$misc_args != x ]]; then
    CMDLINE=$CMDLINE' '$misc_args
  fi
}

########################################
### Read configuratio file
########################################
function read_conf_file
{
  cmds=$(awk -f - $1 <<EOAS
  
  BEGIN {
    DISKS    = -1;
    NICS     = -1;
    CSECTION = "";
  }
  
  /^[ \\ta-zA-Z0-9_-+!@$%^&\\/.:]+/ {
    pos   = index(\$0, "=");
    if (pos > 0)
    {
          left  = substr(\$0, 1, pos - 1);
          right = substr(\$0, pos + 1, length(\$0) - pos);
          gsub("^[ \\t]+" ,"", left);
          gsub("[ \\t]+$" ,"", left);
          gsub("^[ \\t]+" ,"", right);
          gsub("[ \\t]+$" ,"", right);
          left = tolower(left);
          if (match(CSECTION, "disk") > 0)
          {
            left = sprintf("%s[%d]", left, DISKS);
          }
          if (match(CSECTION, "network") > 0)
          {
            left = sprintf("%s[%d]", left, NICS);
          }
          printf ("%s_%s=%s\n", CSECTION, left, right);
    }
  }
  
/^[ \\t]*\\[[a-zA-Z0-9_-+!@$%^&\\/.:]+/ {
  gsub("^[ \\t]+" ,"", \$1);
  gsub("[ \\t]+$" ,"", \$1);
  gsub("^\\[" ,"", \$1);
  gsub("\\]$" ,"", \$1);
  CSECTION = \$1;
  if (match(CSECTION,"disk") > 0)
  {     
        DISKS = DISKS + 1;
  }
  if (match(CSECTION, "network") > 0)
  {     
        NICS = NICS + 1;
  }
}
EOAS
)
  for v in $cmds;
  do
    eval $v
  done
}

########################################
### Read configuration
########################################
function read_conf
{
  set_default_values

  def_conf=$SYSDIR/vmmaestro.conf

  if [ ! -f $def_conf ]; then
    echo You must place vmmaestro.conf in $SYSDIR
    exit 3
  fi
  read_conf_file $def_conf
  if [[ x$system_sasl_conf_path != x ]]; then
    export SASL_CONF_PATH=$system_sasl_conf_path
  fi

  vm_conf=$SYSDIR/$vm.conf

  if [ ! -f $vm_conf ]; then
    echo You must place $vm.conf in $SYSDIR
    exit 3
  fi
  read_conf_file $vm_conf
}

########################################
### Destroy configuration
########################################
function del_conf
{
  unset vm
  unset cpu_cores
  unset cpu_threads
  unset cpu_sockets
  unset cpu_iswinguest
  unset network_type
  unset network_addr
  unset network_name
  unset network_model
  unset network_vhost
  unset network_bridge
  unset network_if
  unset network_ifup
  unset network_ifdown
  unset vg_name
  unset disk_lv
  unset disk_if
  unset disk_fmt
  unset disk_dp
  unset disk_aio
  unset cdrom_iso
  unset cdrom_if
  unset keyboard_lang
  unset floppy_drive1
  unset floppy_drive2
  unset display_type
  unset spice_port
  unset spice_tls_port
  unset system_SASL_CONF_PATH
  unset system_SSLDIR
}

########################################
### Is running process
########################################
function proc_check
{
  get_pid_file
  if [[ ! -f $pid_file ]]; then
  	return 1
  fi
  $SUDO kill -0 `$SUDO cat $pid_file` > /dev/null 2>&1
  return $?
}

########################################
### start vm
########################################
function start_vm
{
  create_rundir

  build_cmdline
  $E $SUDO $CMDLINE

}

########################################
### shutdown vm
########################################
function shutdown_vm
{
  get_monitor
  echo system_powerdown | $SUDO socat - UNIX-CONNECT:$monitor_port
  delay=0
  proc_check
  while [[ ! $? && $delay < $boot_qemu_delay ]];
  do
    ((delay=delay+1))
    sleep 1
    proc_check
  done

  if [[ $boot_qemu_delay == $delay ]]; then
      echo Failed to shutdown $vm
      exit 21
  fi
}

########################################
### stop vm
########################################
function stop_vm
{
  get_monitor
  echo quit | $SUDO socat - UNIX-CONNECT:$monitor_port
  delay=0
  proc_check
  while [[ ! $? && $delay < $boot_qemu_delay ]];
  do
    ((delay=delay+1))
    sleep 1
    proc_check
  done

  if [[ $boot_qemu_delay == $delay ]]; then
      echo Failed to stop $vm
      exit 22
  fi
}

########################################
### stauts
########################################
function status_vm
{
  echo -n $vm" "
  proc_check
  if [[ $? -ne 0 ]]; then
    echo is stopped.
    return 1
  else
    echo is running.
    return 0
  fi
}

########################################
### Connect to console
########################################
function connect_to_console
{
  clear
  get_serial
  echo For reasons unknown, ^O is the panic button.
  $SUDO socat -,raw,echo=0,escape=0x0f UNIX-CONNECT:$serial_port 
}

########################################
### Connect to monitor
########################################
function connect_to_monitor
{
  clear
  get_monitor
  echo For reasons unknown, ^O is the panic button.
  $SUDO socat -,raw,echo=0,escape=0x0f UNIX-CONNECT:$monitor_port
}

########################################
### main
########################################

if [[ $use_sudo == 'y' ]]; then
  SUDO='sudo'
elif [[ $use_sudo == 'd' ]]; then
  SUDO='doas'
else
  SUDO=
fi

cmd=$1
shift

res=0

while [[ "$1" ]]; do
  vm=$1
  read_conf
  case "$cmd" in
    console|serial|serial0)
      connect_to_console
      ;;
    monitor|kvm|qemu)
      connect_to_monitor
      ;;
    consolestart|cstart)
      start_vm
      connect_to_console
      break
      ;;
    start)
      start_vm
      ;;
    stop)
      stop_vm
      ;;
    shutdown)
      shutdown_vm
      ;;
    restart)
      shutdown_vm
      start_vm
      ;;
    kill)
      get_pid_file
      $SUDO kill -KILL `$SUDO cat $pid_file`
      ;;
    status)
      status_vm
      res=$(( $res + $? ))
      ;;
    *)
      echo "Unknown command: "$cmd. >&2
      exit 2
      ;;
  esac
  del_conf
  shift
done

exit $res
